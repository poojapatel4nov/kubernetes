Pod Commands

#Create a nginx pod , it will pull docker image nginx from docker hub and create a pod.
kubectl run nginx --image nginx

#list out recently created pod
kubectl get pods

# -o wide parameter give details about IP of Pod and node on which is it running
kubectl get pods -o wide

#Describe pods command give us more details on pod, like on which node this pod is running, which image it is using and so on.

kubectl describe pods 

#list node in kubernetes cluster
kubectl get nodes

#Create a Pod using YAML file.
Kubernets yaml file contains top level fields(apiVersion, kind, metadata and spec).

1. apiVerions :-Version of kubernates api we are using, for pod it is V1, other apiVersion are 
apps/v1 

2. Kind:- Type of Object we are creating, if we create Pod then kind should be Pod, for replcaset 
it should be ReplicaSet. other values are Service and Deployment.

3. Metadata:- Data about the object, like Name, Lable etc.it is a type of Dictionary.

spec:= this is specification for Pod or object we are creating, it is a type of dictioney and contain
other field such as Containers(it is type of list/array).

#Create a pod definition file. and create pod using below command.

kubectl create -f Pod-definition.yml
kubectl get pods
kubectl get pods -o wide   #show Ip and Node 
kubectl describe pods

Replication Set and Replication Controller:=
It ensure that minimum no of Pod running at any point of time,
Selector is available in both replcaset and replication Controller but in replication Controller
if we don't specify its value then relication Controller use lable which is defined in pod definition


Create Replication Controllor definition file and run with using below command.

kubectl create -f rc-definition.yml
kubectl get replicationcontroller
kubectl get pods
kubectl get pods -o wide

kubectl delete replicationcontroller myapp-rc  

Create ReplicaSet using replicaset-definition file and run below commands.
kubectl create -f replicaset-definition.yml
kubectl get replicaset
kubectl delete replicaset myapp-replicaset

#apply change of replicaset in already running replicaset, like increasing no of pod.
kubectl replace -f replicaset-definition.yml   

we can also scale replicaset using commond line without modifying file as below.
kubectl scale --replicas=6 -f replicaset-definition.yml

Delete on pod using below command, replicaset will create it again immidiatly.

kubectl delete pod myapp-replicaset-45nhl
kubectl get pods  

Create a extra pod using same pod definition file(label should match), repication set will delete that pod immidiatly.
increae no of replica in replicaset definition file, apply change using below command.

kubectl replace -f replicaset-definition.yml 

Scale down/up no of replica using below command without modifying files.

kubectl scale --replicas=3 -f replicaset-definition.yml

Create Deployment:- Deployment file has similer definition file as we have in replicaset 
definition, only difference is that kind will be type of Deployment.

Once file has been create use below command to create deployment.

kubectl create -f deploymnet-definition.yml

kubectl get deployment

kubectl get replicaset

kubectl get pods

kubectl describe deployment

or run 

kubectl get all   (it will show all running depoyment , replicaset and pods)


Update and rollback 

Two type of deployment stratagies 
Recreate  :- Stop all pod in replicaset and create new with updated version. application will 
be down for sometime in this case.
Rolling update  : this is also a default stratagy, in this a parallar replicaset created and
one pod bring down from old replicaset and new pod is created in new replicaset.
update deployment file i.e. image version (image:  nginx:1.17.10) and run below command to 
apply changes.

kubectl apply -f deployment-definition.yml

kubectl get replicaset   (you will see two replicasets)

We can also update deployment using below set image command, in this case deployment definition 
file will contain different image name.

kubectl 








 
	  